// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var casper, data, downloadImage, fetchImageLinks, folder, forEachWebCallback, imgLinks, nLtoArray;

  require('getTee');

  data = {
    domains: [
      {
        url: 'http://www.teefury.com',
        cssData: [
          {
            selector: 'div[id^="design-view-modal"]>img',
            attribute: 'data-original'
          }
        ]
      }, {
        url: 'http://www.qwertee.com',
        cssData: [
          {
            selector: 'div.zoom-dynamic-image>img.dynamic-image-design',
            attribute: 'src'
          }, {
            selector: 'div.zoom-dynamic-image>div.background',
            attribute: 'style'
          }
        ]
      }
    ]
  };

  imgLinks = [];

  folder = "images/";

  casper = require('casper').create({
    verbose: true,
    logLevel: 'debug'
  });

  casper.start();

  casper.userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36");

  nLtoArray = function(nL) {
    var array, i, l;
    i = -1;
    l = nL.length;
    array = [];
    while (++i !== l) {
      array[i] = nL[i];
    }
    return array;
  };

  fetchImageLinks = function(cssData) {
    var background, backgrounds, elements, n, _i, _len, _results;
    elements = this.getElementsAttribute(cssData.selector, cssData.attribute);
    if (cssData.attribute !== 'style') {
      imgLinks = nLtoArray(elements);
      return imgLinks.forEach(downloadImage, casper);
    } else {
      backgrounds = nLtoArray(elements);
      _results = [];
      for (_i = 0, _len = backgrounds.length; _i < _len; _i++) {
        background = backgrounds[_i];
        n = background.indexOf(":");
        background = background.slice(n + 2);
        _results.push(this.echo(background));
      }
      return _results;
    }
  };

  forEachWebCallback = function(domain) {
    return casper.thenOpen(domain.url, function() {
      this.echo("\n> Accessing " + domain.url, 'INFO');
      return domain.cssData.forEach(fetchImageLinks, this);
    });
  };

  downloadImage = function(image) {
    var imgName, location, n;
    n = image.lastIndexOf("/");
    imgName = image.slice(n + 1);
    location = folder.concat(imgName);
    return this.download(image, location);
  };

  casper.on('page.error', function(msg, trace) {
    return this.echo('Error: ' + msg, 'ERROR');
  });

  casper.on('downloaded.file', function(path) {
    return this.echo("> Img downloaded to " + path, 'INFO');
  });

  casper.then(function() {
    return data.domains.forEach(forEachWebCallback);
  });

  casper.run();

}).call(this);
